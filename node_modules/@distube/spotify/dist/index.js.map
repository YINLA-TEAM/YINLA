{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { parse as parseSpotifyURI } from \"spotify-uri\";\nimport fetch from \"isomorphic-unfetch\";\nimport SpotifyUrlInfo from \"spotify-url-info\";\nimport SpotifyWebApi from \"spotify-web-api-node\";\nimport { CustomPlugin, DisTubeError, Playlist, Song, checkInvalidKey } from \"distube\";\nimport type { VoiceBasedChannel } from \"discord.js\";\nimport type { PlayOptions, PlaylistInfo, Queue, SearchResult } from \"distube\";\n\nconst SUPPORTED_TYPES = [\"album\", \"playlist\", \"track\", \"artist\"];\nconst API = new SpotifyWebApi();\nconst spotify = SpotifyUrlInfo(fetch);\nlet expirationTime = 0;\n\ndeclare type SpotifyPluginOptions = {\n  api?: {\n    clientId: string;\n    clientSecret: string;\n  };\n  parallel?: boolean;\n  emitEventsAfterFetching?: boolean;\n};\n\ntype Falsy = undefined | null | false | 0 | \"\";\nconst isTruthy = <T>(x: T | Falsy): x is T => Boolean(x);\ntype ClassMethods<T> = { [K in keyof T]: T[K] extends (...args: any[]) => any ? K : never }[keyof T];\n\nconst refreshAPIToken = async () => {\n  if (expirationTime <= Date.now() - 60000) {\n    const res = await API.refreshAccessToken().catch(() => API.clientCredentialsGrant());\n    expirationTime = Date.now() + res.body.expires_in * 1000;\n    API.setAccessToken(res.body.access_token);\n  }\n};\n\nconst getItems = async (data: any): Promise<any[]> => {\n  if (data.trackList) {\n    data.tracks = {\n      items: data.trackList.map((track: any) => ({\n        type: \"track\",\n        name: track.title,\n        artists: [{ name: track.subtitle }],\n      })),\n    };\n    if (data.trackList.length > 90) {\n      data.tracks.next = true;\n      data.tracks.limit = 90;\n      data.tracks.offset = 0;\n      data.tracks.items.splice(90);\n    }\n  }\n  if (!data.tracks.items) return data.tracks;\n  const items: any[] = data.tracks.items;\n  if (![\"playlist\", \"album\"].includes(data.type)) return items;\n  while (data.tracks.next) {\n    if (!expirationTime) break;\n    await refreshAPIToken();\n    try {\n      data.tracks = (\n        await API[data.type === \"playlist\" ? \"getPlaylistTracks\" : \"getAlbumTracks\"](data.id, {\n          offset: data.tracks.offset + data.tracks.limit,\n          limit: 100,\n        })\n      ).body;\n    } catch (e: any) {\n      process.emitWarning(`${e?.body?.message}`, \"SpotifyApi\");\n      process.emitWarning(\"There is a Spotify API error, max songs of Spotify playlist is 100.\", \"SpotifyPlugin\");\n      break;\n    }\n    items.push(...data.tracks.items);\n  }\n  return items;\n};\n\nconst getAPI = <T extends ClassMethods<typeof API>>(method: T, ...args: Parameters<typeof API[T]>) =>\n  (<any>API[method])(...args).then((r: any) => r.body);\n\nconst getDataWithAPI = async (url: string) => {\n  const parsedURL = parseSpotifyURI(url);\n  let data: any;\n  const id = (<any>parsedURL).id;\n  if (!id) throw new DisTubeError(\"SPOTIFY_PLUGIN_UNSUPPORTED_LINK\", \"This link is not supported.\");\n  await refreshAPIToken();\n  try {\n    switch (parsedURL.type) {\n      case \"track\":\n        data = await getAPI(\"getTrack\", id);\n        break;\n      case \"album\":\n        data = await getAPI(\"getAlbum\", id);\n        data.tracks = await getAPI(\"getAlbumTracks\", id, { limit: 50 });\n        break;\n      case \"artist\":\n        data = await getAPI(\"getArtist\", id);\n        data.tracks = (await getAPI(\"getArtistTopTracks\", id, \"US\")).tracks;\n        break;\n      case \"playlist\":\n        data = await getAPI(\"getPlaylist\", id);\n        data.tracks = await getAPI(\"getPlaylistTracks\", id, { limit: 100 });\n        break;\n      default:\n        throw new DisTubeError(\"SPOTIFY_PLUGIN_UNSUPPORTED_TYPE\", \"This type is not supported.\");\n    }\n  } catch (error: any) {\n    throw new DisTubeError(\"SPOTIFY_PLUGIN_API_ERROR\", error?.body?.error?.message || error.message || error);\n  }\n  return data;\n};\n\nexport class SpotifyPlugin extends CustomPlugin {\n  parallel: boolean;\n  emitEventsAfterFetching: boolean;\n  constructor(options: SpotifyPluginOptions = {}) {\n    super();\n    if (typeof options !== \"object\" || Array.isArray(options)) {\n      throw new DisTubeError(\"INVALID_TYPE\", [\"object\", \"undefined\"], options, \"SpotifyPluginOptions\");\n    }\n    checkInvalidKey(options, [\"parallel\", \"emitEventsAfterFetching\", \"api\"], \"SpotifyPluginOptions\");\n    this.parallel = options.parallel ?? true;\n    if (typeof this.parallel !== \"boolean\") {\n      throw new DisTubeError(\"INVALID_TYPE\", \"boolean\", this.parallel, \"SpotifyPluginOptions.parallel\");\n    }\n    this.emitEventsAfterFetching = options.emitEventsAfterFetching ?? false;\n    if (typeof this.emitEventsAfterFetching !== \"boolean\") {\n      throw new DisTubeError(\n        \"INVALID_TYPE\",\n        \"boolean\",\n        this.emitEventsAfterFetching,\n        \"SpotifyPluginOptions.emitEventsAfterFetching\",\n      );\n    }\n    API.setAccessToken(\"\");\n    if (options.api !== undefined && (typeof options.api !== \"object\" || Array.isArray(options.api))) {\n      throw new DisTubeError(\"INVALID_TYPE\", [\"object\", \"undefined\"], options.api, \"api\");\n    } else if (options.api) {\n      if (typeof options.api.clientId !== \"string\") {\n        throw new DisTubeError(\"INVALID_TYPE\", \"string\", options.api.clientId, \"SpotifyPluginOptions.api.clientId\");\n      }\n      if (typeof options.api.clientSecret !== \"string\") {\n        throw new DisTubeError(\n          \"INVALID_TYPE\",\n          \"string\",\n          options.api.clientSecret,\n          \"SpotifyPluginOptions.api.clientSecret\",\n        );\n      }\n      API.setClientId(options.api.clientId);\n      API.setClientSecret(options.api.clientSecret);\n      API.clientCredentialsGrant()\n        .then(data => {\n          expirationTime = Date.now() + data.body.expires_in * 1000;\n          API.setAccessToken(data.body.access_token);\n        })\n        .catch(e => {\n          /* eslint-disable no-console */\n          console.error(e);\n          console.warn(\"[SpotifyPlugin]: Cannot get Spotify access Token from your api info. Disabled API feature!\");\n          /* eslint-enable no-console */\n        });\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  override async validate(url: string) {\n    if (typeof url !== \"string\" || !url.includes(\"spotify\")) return false;\n    try {\n      const parsedURL = parseSpotifyURI(url);\n      if (!parsedURL.type || !SUPPORTED_TYPES.includes(parsedURL.type)) return false;\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  async play(voiceChannel: VoiceBasedChannel, url: string, options: PlayOptions) {\n    const DT = this.distube;\n    const data = await spotify.getData(url).catch(() => {\n      if (!expirationTime) {\n        throw new DisTubeError(\n          \"SPOTIFY_PLUGIN_UNKNOWN_EMBED\",\n          \"Couldn't parse this embed link. Please provide Spotify API credentials as a backup.\",\n        );\n      }\n      return getDataWithAPI(url);\n    });\n    const { member, textChannel, skip, position, metadata } = Object.assign({ position: 0 }, options);\n    if (data.type === \"track\") {\n      const query = `${data.name} ${data.artists.map((a: any) => a.name).join(\" \")}`;\n      const result = await this.search(query);\n      if (!result) throw new DisTubeError(\"SPOTIFY_PLUGIN_NO_RESULT\", `Cannot find \"${query}\" on YouTube.`);\n      await DT.play(voiceChannel, result, options);\n    } else {\n      const name = data.name;\n      const thumbnail = (data.coverArt?.sources || data.images)?.[0]?.url;\n      const queries: string[] = (await getItems(data))\n        .map(item => {\n          const track = item.track || item;\n          if (track.type !== \"track\") return null;\n          return `${track.name} ${track.artists.map((a: any) => a.name).join(\" \")}`;\n        })\n        .filter(isTruthy);\n      let firstSong: Song | undefined;\n      const getFirstSong = async () => {\n        const firstQuery = queries.shift();\n        if (!firstQuery) return;\n        const result = await this.search(firstQuery);\n        if (!result) return;\n        firstSong = new Song(result, { member, metadata });\n      };\n      while (!firstSong) await getFirstSong();\n\n      if (!firstSong) {\n        throw new DisTubeError(\"SPOTIFY_PLUGIN_NO_RESULT\", `Cannot find any tracks of \"${name}\" on YouTube.`);\n      }\n      const queue = DT.getQueue(voiceChannel);\n\n      const playlistInfo: PlaylistInfo = {\n        source: \"spotify\",\n        songs: [firstSong],\n        name,\n        thumbnail,\n        member,\n        url,\n      };\n      const playlist = new Playlist(playlistInfo, { member, metadata });\n      const fetchTheRest = async (q: Queue, fs: Song) => {\n        if (queries.length) {\n          let results: (SearchResult | null)[] = [];\n          if (this.parallel) {\n            results = await Promise.all(queries.map(query => this.search(query)));\n          } else {\n            for (let i = 0; i < queries.length; i++) {\n              results[i] = await this.search(queries[i]);\n            }\n          }\n          playlist.songs = results.filter(isTruthy).map(r => {\n            const s = new Song(r, { member, metadata });\n            s.playlist = playlist;\n            return s;\n          });\n          q.addToQueue(playlist.songs, !skip && position > 0 ? position + 1 : position);\n        }\n        playlist.songs.unshift(fs);\n      };\n      if (queue) {\n        queue.addToQueue(firstSong, position);\n        if (skip) queue.skip();\n        else if (!this.emitEventsAfterFetching) DT.emit(\"addList\", queue, playlist);\n        await fetchTheRest(queue, firstSong);\n        if (!skip && this.emitEventsAfterFetching) DT.emit(\"addList\", queue, playlist);\n      } else {\n        let newQueue = await DT.queues.create(voiceChannel, firstSong, textChannel);\n        while (newQueue === true) {\n          await getFirstSong();\n          newQueue = await DT.queues.create(voiceChannel, firstSong, textChannel);\n        }\n        if (!this.emitEventsAfterFetching) {\n          if (DT.options.emitAddListWhenCreatingQueue) DT.emit(\"addList\", newQueue, playlist);\n          DT.emit(\"playSong\", newQueue, firstSong);\n        }\n        await fetchTheRest(newQueue, firstSong);\n        if (this.emitEventsAfterFetching) {\n          if (DT.options.emitAddListWhenCreatingQueue) DT.emit(\"addList\", newQueue, playlist);\n          DT.emit(\"playSong\", newQueue, firstSong);\n        }\n      }\n    }\n  }\n\n  async search(query: string) {\n    try {\n      return (await this.distube.search(query, { limit: 1 }))[0];\n    } catch {\n      return null;\n    }\n  }\n}\n\nexport default SpotifyPlugin;\n"],"mappings":"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","names":["SpotifyWebApi","SpotifyUrlInfo","fetch","parseSpotifyURI"]}